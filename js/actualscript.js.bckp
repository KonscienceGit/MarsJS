//https://threejs.org/examples/#webgl_modifier_subdivision
//https://threejs.org/docs/#api/geometries/SphereGeometry
"use strict";

var main = function () {
//engine variables
    var time = 0;
    var marsRotate = true;
    var marsRotation = 0;
    var maxAnisotropy;

//trinity of holy objects
    var scene;
    var camera;
    var renderer;

//camera controls
    var controls;

//lights
    var sunlight;

//geometry
    var geomSphere;

//mesh objects
    var mars;
    var sun;
    var skybox;

//materials
    var matMars;

    init();
    initGUI();
    animate();

    function init() {
    //depicting of the genesis
        scene = new THREE.Scene();
        camera = new THREE.PerspectiveCamera(60, window.innerWidth / window.innerHeight, 0.001, 200);
        camera.position.z = 4.5;

        renderer = new THREE.WebGLRenderer();
        maxAnisotropy = renderer.capabilities.getMaxAnisotropy(); //Anisotrop filtering, setting to the max possible
        renderer.setSize(window.innerWidth, window.innerHeight);
        document.body.appendChild(renderer.domElement);
        controls = new THREE.OrbitControls( camera );

    //images and textures
        var textureLoader = new THREE.TextureLoader();

    //Earth maps
    /*    var colorMapEarth = textureLoader.load("maps/earth.jpg");
        colorMapEarth.anisotropy = maxAnisotropy;
        var specularMapEarth = textureLoader.load("maps/earth_specular_map.jpg");
        var normalMapEarth = textureLoader.load("maps/earth_normal_map.jpg");
        normalMapEarth.anisotropy = maxAnisotropy;*/

        var colorMapMars = textureLoader.load("maps/mars/mars.jpg");
        colorMapMars.anisotropy = maxAnisotropy;
        var normalMapMars = textureLoader.load("maps/mars/Blended_NRM.png");
        colorMapMars.anisotropy = maxAnisotropy;
        var displacementMapMars = textureLoader.load("maps/mars/Blended_DISP.jpg");

        var colorMapSkybox = textureLoader.load("maps/milkyway.jpg");
        colorMapSkybox.anisotropy = maxAnisotropy;

        /*var matEarth = new THREE.MeshPhongMaterial({
            color: 0xaaaaaa,
            shininess: 25,
            map: colorMapEarth,
            specularMap: specularMapEarth,
            normalMap: normalMapEarth
        });*/

        matMars = new THREE.MeshPhongMaterial({  //Standard work also
            color: 0xaaaaaa,
            specular: 0x000000,
            shininess: 0,
            map: colorMapMars,
            normalMap: normalMapMars,
            displacementMap: displacementMapMars
        });

        var matSkybox = new THREE.MeshBasicMaterial({
            map: colorMapSkybox,
            side: THREE.BackSide
        });

        var matWhite = new THREE.MeshBasicMaterial({color: 0xffffff});


    //geometry
        var geomCube = new THREE.BoxGeometry(1, 1, 1);

        var geomSkybox = new THREE.SphereGeometry (10,24,16);
        geomSphere = new THREE.SphereGeometry (1,300,200); // not local in order to be modified by dat gui

    //mesh positioning
    /*    earth = new THREE.Mesh(geomSphere, matEarth);
        earth.position.x = 0;
        earth.position.y = 2.5;
        scene.add(earth);*/
        /*mars = new THREE.Mesh(geomSphere, matMars);
        mars.position.x = 0;
        mars.position.y = 0;
        scene.add(mars);*/

        sun = new THREE.Mesh(geomSphere, matWhite);
        sun.position.x = 100;
        sun.position.y = 0;
        scene.add(sun);

        skybox = new THREE.Mesh(geomSkybox, matSkybox);
        skybox.material.depthWrite = false;
        skybox.renderOrder = -999;
        scene.add(skybox);

        createMars( 100 );


    //light
        renderer.toneMappingExposure = 2; //affect exposure
        sunlight = new THREE.PointLight( 0xffffff, 5, 200, 2 );
        sunlight.position.x=100;
        scene.add( sunlight );

    //Even called on window resizing
        window.addEventListener( "resize", onWindowResize, false );
    }

    function animate() {
        requestAnimationFrame(animate);
        controls.update();
        time += 1;

        if (marsRotate) {
            marsRotation += 0.003;
            mars.rotation.y = marsRotation;
        }
        /*earth.rotation.y += 0.003;*/
        /*earth.position.x=8*Math.cos(-time/800);*/
        /*earth.position.z=8*Math.sin(-time/800);*/
        skybox.position.x = camera.position.x;
        skybox.position.y = camera.position.y;
        skybox.position.z = camera.position.z;

        renderer.render(scene, camera);
    }

//Dat GUI initialisation
    function initGUI() {
        var gui = new dat.GUI( { width: 350 } );
        var oldVM = 10; //previous value of Mars sphere vertex multiplier
        var effectController = {
            "NormalMapScale": 0.55,
            "DisplacementMapScale": 0.05,
            "VertexMultiplier": 100, //Mars sphere vertex multiplier (Default value is 100, vertex number is then 100x2x100x3 = 60 000)
            "AnisotropicFiltering": maxAnisotropy,
            "Reset":function(){ resetOptions() },
            "RotationMars":function(){ toggleRotation() }
            };

        function resetOptions() {
            effectController.NormalMapScale = 0.55;
            effectController.DisplacementMapScale = 0.05;
            effectController.VertexMultiplier = 100;
            recreateMars();
            normalMapScaleChanged();
            displacementMapScaleChanged();
        }

        function toggleRotation() {
            if (marsRotate) {
                marsRotate = false;
            } else {
                marsRotate = true;
            }
        }

        function normalMapScaleChanged() { matMars.normalScale.set ( effectController.NormalMapScale, effectController.NormalMapScale ); }
        gui.add( effectController, "NormalMapScale", 0.0, 1.0, 0.01 ).onChange( normalMapScaleChanged ).name("Normal Map Scale").listen();
        function displacementMapScaleChanged() { matMars.displacementScale = effectController.DisplacementMapScale; }
        gui.add( effectController, "DisplacementMapScale", 0.0, 0.15, 0.005 ).onChange( displacementMapScaleChanged ).name("Displacement Map Scale").listen();
        function recreateMars() {
            //if Vertex count is changed, update the mesh by deleting it and recreating it
            if (oldVM !== effectController.VertexMultiplier) {
                oldVM = effectController.VertexMultiplier;
                scene.remove(mars);
                mars = new THREE.Mesh(new THREE.SphereGeometry( 1,  effectController.VertexMultiplier*3, effectController.VertexMultiplier*2 ), matMars);
                mars.position.x = 0;
                mars.position.y = 0;
                mars.rotation.y = marsRotation;
                scene.add(mars);
            }
        }
        gui.add( effectController, "VertexMultiplier", 5, 250, 5 ).onChange( recreateMars ).name("Polygon Count Multiplier").listen();
        gui.add( effectController, "Reset" ).name("RESET");
        gui.add( effectController, "RotationMars" ).name("Rotation ON/OFF");
        function changeAnisotropy() {
            skybox.material.map.anisotropy = effectController.AnisotropicFiltering;
            mars.material.normalMap.anisotropy = effectController.AnisotropicFiltering;
            mars.material.map.anisotropy = effectController.AnisotropicFiltering;
            skybox.material.map.needsUpdate = true;
            mars.material.normalMap.needsUpdate = true;
            mars.material.map.needsUpdate = true;
            }
        gui.add( effectController, "AnisotropicFiltering", 1, 16, 1 ).onChange( changeAnisotropy ).listen();
        //initialize all parameters
        resetOptions();
    }

    //when window is resized, event listenner call this function
    function onWindowResize() {
        camera.aspect = window.innerWidth / window.innerHeight;
        camera.updateProjectionMatrix();
        renderer.setSize( window.innerWidth, window.innerHeight );
    }

    function createMars ( vertexMult ) {
        mars = new THREE.Mesh(new THREE.SphereGeometry( 1,  vertexMult*3, vertexMult*2 ), matMars);
        mars.position.x = 0;
        mars.position.y = 0;
        mars.rotation.y = marsRotation;
        scene.add(mars);
    }
};
